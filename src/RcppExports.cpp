// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// exp_rs
double exp_rs(double a, double b);
RcppExport SEXP _BayMor_exp_rs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_rs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// nors
double nors(double a, double b);
RcppExport SEXP _BayMor_nors(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(nors(a, b));
    return rcpp_result_gen;
END_RCPP
}
// urs
double urs(double a, double b);
RcppExport SEXP _BayMor_urs(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(urs(a, b));
    return rcpp_result_gen;
END_RCPP
}
// hnors
double hnors(double a, double b);
RcppExport SEXP _BayMor_hnors(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(hnors(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnorm
double rtruncnorm(double mu, double sigma, double lower, double upper);
RcppExport SEXP _BayMor_rtruncnorm(SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm(mu, sigma, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// mor
arma::mat mor(arma::mat Y, arma::rowvec l, Rcpp::List X, arma::rowvec nx, int Nit);
RcppExport SEXP _BayMor_mor(SEXP YSEXP, SEXP lSEXP, SEXP XSEXP, SEXP nxSEXP, SEXP NitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type l(lSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< int >::type Nit(NitSEXP);
    rcpp_result_gen = Rcpp::wrap(mor(Y, l, X, nx, Nit));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _BayMor_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _BayMor_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _BayMor_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _BayMor_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayMor_exp_rs", (DL_FUNC) &_BayMor_exp_rs, 2},
    {"_BayMor_nors", (DL_FUNC) &_BayMor_nors, 2},
    {"_BayMor_urs", (DL_FUNC) &_BayMor_urs, 2},
    {"_BayMor_hnors", (DL_FUNC) &_BayMor_hnors, 2},
    {"_BayMor_rtruncnorm", (DL_FUNC) &_BayMor_rtruncnorm, 4},
    {"_BayMor_mor", (DL_FUNC) &_BayMor_mor, 5},
    {"_BayMor_rcpparma_hello_world", (DL_FUNC) &_BayMor_rcpparma_hello_world, 0},
    {"_BayMor_rcpparma_outerproduct", (DL_FUNC) &_BayMor_rcpparma_outerproduct, 1},
    {"_BayMor_rcpparma_innerproduct", (DL_FUNC) &_BayMor_rcpparma_innerproduct, 1},
    {"_BayMor_rcpparma_bothproducts", (DL_FUNC) &_BayMor_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayMor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
